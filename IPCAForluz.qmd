---
title: "Relatório Mensal"
subtitle: "Análise do IPCA - IBGE"
date: last-modified
lang: pt
format: html
author: "DIC-RF"
title-block-banner: "#0f0c0fff"
execute: 
  echo: false
  warning: false
project:
    type: website
    output-dir: docs
---

```{python}
# Instalando bibliotecas e importando-as
import pandas as pd
import sidrapy
from bcb import sgs
from bcb import Expectativas
import dbnomics
import datetime
import matplotlib as mt
import plotnine as p9
```

```{python}
# Coletando dados importantes e tratando

# Sidra - IPCA
dados_ipca = (
    sidrapy.get_table(
        table_code="7060",
        territorial_level="1",
        ibge_territorial_code="all",
        variable="63,69,2265,66",
        classifications= {"315": "7169,7170,7445,7486,7558,7625,7660,7712,7766,7786"},
        period = "all"
    )
)

# Metas BCB
meta = (
   sgs.get(
    codes={"Meta": 13521}
   ) 
)


# Núcleos 

Núcleos_IPCA = (
    sgs.get(
        {
         "P55": 28750,
         "DP": 16122,
         "MS": 4466,
         "EX3": 27839,
         "EX0": 11427
        }
    )       
)

# Desagregação 

dados_brutos_classificacoes = (
  sgs.get(
      codes =
          {"comercializaveis": 4447,
           "nao_comercializaveis": 4448,
           "industriais": 27863,
           "servicos": 10844,
           "monitorados": 4449,
           "alimentacao_no_domicilio": 27864,
           "livres": 11428
          },
          start = '2000-01-01'
)
)

# Difusão

indice_difusao = (
 sgs.get(
     {"Difusão": 21379}
 )
)
```

```{python}


# Tratamento dos dados

# Sidra - IPCA
dados_IPCA_tratado = (
    dados_ipca
    .rename(
        columns={"V":"valor", "D2C": "data", "D3N": "variavel", "D4N": "grupo"}
    )
    .filter(
        items = ["data", "valor", "variavel", "grupo"]
    )
    .query(
        "valor not in ['Valor'] & valor not in ['...']"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y%m"),
        valor = lambda x: x.valor.astype(float)
    )
    .replace(
        to_replace="IPCA - Variação mensal",
        value="variação % mensal"
    )
    .replace(
        to_replace="IPCA - Variação acumulada no ano",
        value="variação % ano"
    )
    .replace(
        to_replace="IPCA - Variação acumulada em 12 meses",
        value = "variação % 12 meses"
    )
    .replace(
        to_replace="IPCA - Peso mensal",
        value="Peso mensal"
    )
    .pivot(index= ['data', 'grupo'], columns='variavel', values = 'valor')
    .reset_index()
    
)


# Meta BCB
meta_tratado = (
    meta
    .reset_index()
    .rename(
        columns={"Date": "data"}
    )
    .rename(
        {"Meta": "meta"}, axis = "columns"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y-%M-%D"),
        meta = lambda x: x.meta.astype(float)
    )
    .set_index('data')
)


# Núcleos

nucleos_tratado = (
    Núcleos_IPCA
    .assign(
        P55 = lambda x: x['P55'].astype(float),
        DP = lambda x: x['DP'].astype(float),
        MS = lambda x: x['MS'].astype(float),
        EX3 = lambda x: x['EX3'].astype(float),
        EX0 = lambda x: x['EX0'].astype(float),
        media_nucleos = lambda x: x.mean(axis = 1)
    )
    .reset_index()
    .rename(
        {"Date": "data"}, axis = "columns"
    )
    
    .set_index('data')
)


nucleos_tratado_12m = (
    nucleos_tratado
    .rolling(window = 12)
    .apply(
        lambda x: ((1+x/100).prod() - 1) * 100, raw=False)
    )



# Dados Classificações IPCA

dados_brutos_classificacoes_tratado = (
    dados_brutos_classificacoes
    .reset_index()
    .rename(
        {"Date": "data"}, axis = "columns"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y-%M-%D")
    )
    .set_index('data')
)

dados_brutos_classificacoes_tratado_12M = (
    dados_brutos_classificacoes
    .reset_index()
    .rename(
        {"Date": "data"}, axis = "columns"
    )
    .assign(
        data = lambda x: pd.to_datetime(x['data'], format = "%Y-%M-%D")
    )
    .set_index('data')
    .rolling(window = 12)
    .apply(lambda x: ((x/100 + 1).prod()-1) * 100, raw = False)
)

# Difusão

difusao_tratado = (
    indice_difusao
    .reset_index()
    .assign(
        Date = lambda x: pd.to_datetime(x["Date"], format = "%Y-%M-%D")
    )
    .rename(
        {"Difusão": "difusao", "Date": "data"}, axis = "columns"
    )
    .set_index('data')
)   


```

## *Headline*

```{python}
#| fig-align: center
grafico_ipca_meta = (
    dados_IPCA_tratado
    .query("grupo == 'Índice geral'")
    .filter(items = ['data', 'grupo', 'variação % mensal', 'variação % 12 meses'])
    .query("data >= '2022-12-31'")
    .set_index('data')
    .join(other = meta_tratado, on = 'data', how = 'left')
    .ffill(axis = 'index')
    .melt(
        value_vars=['variação % mensal', 'variação % 12 meses', 'meta'],
        ignore_index=False,
        value_name='valores'
         )
    .reset_index()
         )


from plotnine import element_blank
import datetime
from mizani.formatters import date_format
last_points = grafico_ipca_meta.sort_values('data').groupby('variable').tail(1)


cores = {
    "variação % mensal": "blue",
    "meta": "red",
    "variação % 12 meses": "#ff8100"
}

estilos = {
    "variação % mensal": "solid",
    "meta": "dashed",
    "variação % 12 meses": "dotted"
}


(
    p9.ggplot(grafico_ipca_meta) +
    p9.aes(
        x = 'data', y = 'valores', color = 'variable', linetype = 'variable') +
    p9.geom_line() + 
    p9.scale_color_manual(values = cores) + 
    p9.scale_linetype_manual(values = estilos) +  
    p9.labs(
        title='Inflação Headline - IPCA',
        x = '',
        y = "",
        caption='Elaborado por DIC-RF | Forluz'
    ) + 
    p9.theme(
        legend_position='top',
        legend_title=element_blank(),
        plot_title= p9.element_text(weight = 'bold'),
        axis_text= p9.element_text(color = 'black')
    ) + 
    p9.scale_x_date(date_breaks='1 year', labels=date_format('%Y')) + 
    p9.geom_label(
        data=last_points,
        mapping=p9.aes(label='valores'),
        fill = ['#ff8100', 'blue', 'red'],
        color = 'white',
        ha='left',
        va='center',
        nudge_x=3,
        size=7, 
        fontweight='bold' 
    )
)
```

## *Análise por grupo de bens e serviços*

```{python}
#| fig-align: center
grafico_variacao_grupo = (
    dados_IPCA_tratado
    .query(
        "grupo not in ['Índice geral'] & grupo not in ['...']"
    )
    .filter(
        items = ['data', 'grupo', 'variação % mensal']
    )
    .loc[lambda x: x['data'] == x['data'].max()]
    .assign(
        grupo = lambda x: x['grupo'].str.replace(r'\d\.', '', regex = True).str.strip()
    )
    .assign(
        cor = lambda x: x['variação % mensal'].apply(lambda x: 'positivo' if x > 0 else 'negativo')
    )
)


(
    p9.ggplot(grafico_variacao_grupo) + 
    p9.geom_col(p9.aes(x = 'grupo', y = 'variação % mensal', fill = 'cor')) + 
    p9.coord_flip() + 
    p9.labs(
        title = 'IPCA por grupo',
        caption = 'Elaborado por DIC-RF | Forluz',
        x = '',
        y = ''
    ) +
    p9.scale_fill_manual(
        values = {'positivo': '#414fb5', 'negativo': '#F5276F'},
        guide=None
    ) + 
    p9.theme(
        plot_title= p9.element_text(weight = 'bold'),
        legend_title=element_blank()

    )
    
)








```

## *Ponderação por grupo de itens*

```{python}
#| fig-align: center

grafico_contribuicao = (
    dados_IPCA_tratado
    .filter(
        items = ['data', 'grupo', 'Peso mensal', 'variação % mensal'],
        axis='columns'
    )
    .replace(
        to_replace=r'\d\.',
        value = '',
        regex = True
    )
    .assign(
        contribuicao = lambda x: (x['Peso mensal'] * x['variação % mensal'])/100
    )
    .filter(items = ['data', 'grupo', 'contribuicao'],
    axis = 'columns')
    .query(
        "grupo not in 'Índice geral'"
    )
    .query(
        "data >= '2024-12-31'"
    )
)

cores_contribuicao = {
    'Alimentação e bebidas': '#db7b0d',
    'Artigos de residência': '#cc2d25',
    'Comunicação': '#a39d9d',
    'Despesas pessoais': 'black',
    'Educação': '#414fb5',
    'Habitação': '#90a386',
    'Saúde e cuidados pessoais': '#14dba9',
    'transportes': '#9411db',
    'Vestuário': '#db0fdb'

}


(
    p9.ggplot(grafico_contribuicao, p9.aes(x = 'data', y = 'contribuicao', fill = 'grupo')) + 
    p9.geom_bar(stat = 'identity') + 
    p9.labs(
        title = 'Contribuição por grupo',
        caption = 'Elaborado por DIC-RF | Forluz',
        x = '',
        y = ''
    ) + 
    p9.theme(
        plot_title= p9.element_text(weight='bold', ha='center'),
        legend_title= p9.element_text(weight='bold', ha = 'center'),
    ) + 
    p9.scale_x_date(date_labels= "%m-%Y") + 
    p9.scale_fill_manual(values = cores_contribuicao)


)






```


## *Variação em 12 meses: diferentes classificações*

```{python}
#| fig-align: center

grafico_classificacao = (
    dados_brutos_classificacoes_tratado_12M 
    .reset_index()
    .query("data >= '2021-12-31'")
    .melt(
        id_vars = 'data',
        value_name = 'variaveis'
    )
    .rename(
        {'variable': 'grupo'},
        axis = 'columns'
    )
)


cores_classificacao = {
    "alimentacao_no_domicilio": "#C7961A",
    "comercializaveis": "#CCCCCC",
    "industriais": "#252545",
    "livres": "#CCCCCC",
    "monitorados": "#CCCCCC",
    "nao_comercializaveis": "#CCCCCC",
    "servicos": "#C7321A"
}

(
    p9.ggplot(grafico_classificacao) + 
    p9.geom_line(p9.aes(x = 'data', y = 'variaveis', color = 'grupo')) + 
    p9.labs(
        title="Classificações - Acum. 12 meses",
        x = '',
        y = '',
        caption = 'Elaborado por DIC-RF | Forluz'
    ) +
    p9.scale_color_manual(
        values = cores_classificacao
    ) +
    p9.scale_x_date(date_labels='%Y') +
    p9.theme(
        plot_title=p9.element_text(weight='bold', 
        ha = 'center'),
        legend_title=p9.element_text(ha = 'center', weight='bold'))
)


```



## *Índice de Difusão*

```{python}
#| fig-align: center
grafico_difusao = (
    difusao_tratado
    .reset_index()
    .assign(
        Difusao_12M = lambda x: x['difusao'].rolling(window = 12).apply(lambda x: x.mean()
        )
    )
    .melt(
        id_vars = 'data',
        value_name = 'variavel'
    )
    .rename(
        {'variable': 'metrica'},
        axis = 'columns'
    )
    .query("data >= '2020-12-31'")
    .assign(
        variavel = lambda x: x['variavel'].round(2)
    )
)

cores_difusao = {
    'difusao': '#C7961A',
    'Difusao_12M': 'black'
}

ultimo_dado = (
    grafico_difusao
    .groupby(by=['metrica'])
    .tail(1)
)
(
    p9.ggplot(grafico_difusao) + 
    p9.geom_line(p9.aes(x = 'data', y = 'variavel', color = 'metrica')) +
    p9.labs(
        title = 'Índice de difusão - Mensal e em 12 meses',
        x = '',
        y = '',
        caption = 'Elaborado por DIC-RF | Forluz'
    ) + 
    p9.theme(
        plot_title=p9.element_text(weight='bold', ha = 'center'), 
        legend_title = p9.element_text(weight='bold', ha = 'center')
    ) + 
    p9.scale_x_date(date_labels = '%Y') + 
    p9.scale_color_manual(
        values = cores_difusao
    ) + 
    p9.geom_label(
        data=ultimo_dado,
        mapping=p9.aes(x = 'data', y = 'variavel', label = 'variavel'),
        fill = ['#C7961A', 'black'],
        color = 'white',
        ha='left',
        va='center',
        nudge_x=-130,
        size=7, 
        fontweight='bold' 
    )
)



```


## *Núcleos de inflação - BCB*

```{python}
#| fig-align: center

grafico_nucleos = (
    nucleos_tratado_12m
    .reset_index()
    .query(
        "data >= '2021-12-31'"
    )
    .melt(
        id_vars = 'data',
        value_name= 'variavel' 
    )
    .assign(
        variavel = lambda x: x['variavel'].round(2)
    )
    .rename(
        {
            'variable': 'Núcleos'
        },
        axis='columns'
    )
)

cores_nucleos = {
    "DP": "#CCCCCC",
    "EX0": "#CCCCCC",
    "EX3": "#CCCCCC",
    "MS": "#CCCCCC",
    "P55": "#CCCCCC",
    "media_nucleos": "#C7961A"
}


(
    p9.ggplot(grafico_nucleos, p9.aes(x = 'data', y = 'variavel', color = 'Núcleos')) +
    p9.geom_line(stat = 'identity') + 
    p9.labs(
        title = 'Núcleos de inflação em 12 meses',
        x = '',
        y = '',
        caption = 'Elaborado por DIC-RF | Forluz'
    ) + 
    p9.scale_color_manual(values = cores_nucleos) + 
    p9.theme(
        plot_title = p9.element_text(weight='bold', ha='center'),
        legend_title= p9.element_text(weight='bold', ha='center')
    ) + 
    p9.scale_x_date(
        date_labels='%Y'
    )

)


```



```{python}
#| fig-align: center

grafico_nucleos_mes = (
    nucleos_tratado
    .reset_index()
    .query(
        "data >= '2021-12-31'"
    )
    .melt(
        id_vars = 'data',
        value_name= 'variavel' 
    )
    .assign(
        variavel = lambda x: x['variavel'].round(2)
    )
    .rename(
        {
            'variable': 'Núcleos'
        },
        axis='columns'
    )
)

cores_nucleos_mes = {
    "DP": "#CCCCCC",
    "EX0": "#CCCCCC",
    "EX3": "#CCCCCC",
    "MS": "#CCCCCC",
    "P55": "#CCCCCC",
    "media_nucleos": "#252545"
}


(
    p9.ggplot(grafico_nucleos_mes, p9.aes(x = 'data', y = 'variavel', color = 'Núcleos')) +
    p9.geom_line(stat = 'identity') + 
    p9.labs(
        title = 'Núcleos de inflação - Mensal',
        x = '',
        y = '',
        caption = 'Elaborado por DIC-RF | Forluz'
    ) + 
    p9.scale_color_manual(values = cores_nucleos_mes) + 
    p9.theme(
        plot_title = p9.element_text(weight='bold', ha='center'),
        legend_title= p9.element_text(weight='bold', ha='center')
    ) + 
    p9.scale_x_date(
        date_labels='%Y'
    )

)

```